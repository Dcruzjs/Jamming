{"version":3,"sources":["util/Spotify.js","Components/Track/Track.js","Components/Tracklist/Tracklist.js","Components/Playlist/Playlist.js","Components/SearchBar/SearchBar.js","Components/SearchResults/SearchResults.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","Track","props","addTrack","bind","removeTrack","this","onAdd","track","onRemove","isRemoval","onClick","className","name","artist","album","renderAction","React","Component","Tracklist","tracks","map","key","id","Playlist","pros","handleNameChange","e","onNameChange","target","value","defaultValue","onChange","playlistTracks","onSave","SearchBar","state","term","search","handleTermChange","setState","onSearch","placeholder","SearchResults","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","alert","fetch","headers","Authorization","then","response","console","log","json","jsonResponse","items","artists","uri","savePlayList","trackUris","lenght","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","savePlaylist","find","savedTrack","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5cce3263.chunk.js","sourcesContent":["const clientId = '3e212b0ab4a744e3b7401ff1b67b6f0d'\n/* const redirectUri = 'http://jammmming-react-app.surge.sh' */\n/* const redirectUri = 'http://localhost:3000/' */\nconst redirectUri = 'https://dcruzjs.github.io/Jamming'\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n        if(accessToken) {\n            return accessToken\n        }\n        /* check  for access token match */\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/)\n        const expiresInMatch =window.location.href.match(/expires_in=([^&]*)/)\n\n        if( accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1]\n            const expiresIn = Number(expiresInMatch[1])\n            /* this clears the parameters, allowing us to grab a new access token when it expires */\n            window.setTimeout( () => accessToken = '', expiresIn * 1000 )\n            window.history.pushState('Access Token', null, '/')\n            return accessToken;\n        }else{\n            const accessUrl= `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl\n        }\n    },  \n    \n    search(term) {\n        alert(`searching for ${term}`)\n        const accessToken = Spotify.getAccessToken()\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        })\n        .then(response => { \n            console.log(response)\n            return response.json() \n            \n            \n        })\n        .then(jsonResponse => {\n            if(!jsonResponse.tracks) {\n                console.log(jsonResponse)\n                return []\n            }\n            return jsonResponse.tracks.items.map( track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri\n\n            }) )\n        })\n    },\n\n    savePlayList(name, trackUris){\n        if(!name || !trackUris.lenght){\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}`}\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', {headers: headers})\n            .then( response => response.json())\n            .then( jsonResponse => {\n                userId = jsonResponse.id \n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, { headers: headers, \n                method: 'POST',\n                body: JSON.stringify({ name: name})})\n                \n            })\n            .then( response => response.json())\n            .then( jsonResponse => {\n                const playlistId = jsonResponse.id\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ uris: trackUris })\n                })\n            })\n                \n        }\n    }\n\n\nexport default Spotify","import React from 'react'\nimport './Track.css'\n\nclass Track extends React.Component {\n    constructor(props){\n        super(props)\n\n        this.addTrack = this.addTrack.bind(this)\n        this.removeTrack = this.removeTrack.bind(this)\n    }\n\n    addTrack(){\n        this.props.onAdd(this.props.track)\n    }\n\n    removeTrack(){\n        this.props.onRemove(this.props.track)\n    }\n\n    renderAction(){\n        if(this.props.isRemoval){\n            return <button onClick={this.removeTrack} className='Track-action'>-</button>\n        }else{\n            return <button onClick={this.addTrack} className='Track-action'>+</button>\n        }\n    }\n    render(){\n        return(\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n            {this.renderAction()}\n            </div>\n        )\n    }\n}\nexport default Track","import React from 'react'\nimport './Tracklist.css'\nimport Track from '../Track/Track'\n\nclass Tracklist extends React.Component {\n    render(){\n        return(\n            <div className=\"TrackList\">\n                {\n                    this.props.tracks.map( track => {\n                        return <Track \n                                    track={track} \n                                    key={track.id} \n                                    onAdd={this.props.onAdd} \n                                    onRemove={this.props.onRemove}\n                                    isRemoval={this.props.isRemoval}\n                                />\n                    })\n                }\n            </div>\n        )\n    }\n}\nexport default Tracklist","import React from 'react'\nimport './Playlist.css'\nimport Tracklist from '../Tracklist/Tracklist'\n\n\nclass Playlist extends React.Component {\n    constructor(pros){\n        super(pros)\n\n        this.handleNameChange = this.handleNameChange.bind(this)\n    }\n\n    handleNameChange(e){\n        this.props.onNameChange(e.target.value)\n    }\n    render(){\n        return(\n            <div className=\"Playlist\">\n                <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange} />\n                <Tracklist \n                    tracks={this.props.playlistTracks} \n                    onRemove={this.props.onRemove} \n                    isRemoval={true} />\n                <button onClick = {this.props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</button>\n            </div>\n        )\n    }\n}\n\nexport default Playlist","import React from 'react';\nimport './SearchBar.css'\n\nclass SearchBar extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            term: ''\n        }\n\n        this.search = this.search.bind(this)\n        this.handleTermChange = this.handleTermChange.bind(this)\n    }\n    handleTermChange(e){\n        this.setState({ term: e.target.value })\n    }\n    search(){\n        this.props.onSearch(this.state.term)\n    }\n    render(){\n        return(\n            <div className=\"SearchBar\">\n                <input onChange = {this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\n                <button className=\"SearchButton\"\n                onClick={this.search}>SEARCH</button>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;","import React from 'react'\nimport './SearchResults.css'\nimport Tracklist from '../Tracklist/Tracklist'\n\nclass SearchResults extends React.Component {\n    render(){\n        return(\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <Tracklist \n                    tracks={this.props.SearchResults} \n                    onAdd={this.props.onAdd}\n                    isRemoval={false}\n                />\n            </div>\n        )\n    }\n}\nexport default SearchResults","import React from 'react';\n/* import logo from './logo.svg'; */\nimport './App.css';\nimport Playlist from '../../Components/Playlist/Playlist'\nimport SearchBar from '../../Components/SearchBar/SearchBar'\nimport SearchResults from '../../Components/SearchResults/SearchResults'\nimport Spotify from '../../util/Spotify'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n\n    this.state = { \n      SearchResults:[],\n      playlistName: 'My Playlist',\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this)  \n    this.removeTrack = this.removeTrack.bind(this)\n    this.updatePlaylistName = this.updatePlaylistName.bind(this)\n    this.savePlaylist = this.savePlaylist.bind(this)\n    this.search = this.search.bind(this)\n  }\n  \n  addTrack(track){\n    let tracks = this.state.playlistTracks\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track)\n    this.setState({ playlistTracks: tracks})\n  }\n\n  removeTrack(track){\n    let tracks = this.state.playlistTracks\n    tracks = tracks.filter( currentTrack => currentTrack.id !== track.id)\n    this.setState({ playlistTracks : tracks})\n  }\n\n  updatePlaylistName(name){\n    this.setState({playlistName: name})\n  }\n\n  savePlaylist(){\n    const trackUris = this.state.playlistTracks.map( track => track.uri )\n    Spotify.savePlaylist(this.state.playlistName, trackUris)\n    .then( () => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(SearchResults => {\n      this.setState({ SearchResults: SearchResults})\n    })\n  }\n\n  render(){\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch = {this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults \n            SearchResults={this.state.SearchResults} \n            onAdd={this.addTrack}\n            />\n            <Playlist \n            playlistName = {this.state.playlistName} \n            playlistTracks = {this.state.playlistTracks}\n            onRemove = {this.removeTrack} \n            onNameChange = {this.updatePlaylistName} \n            onSave = {this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}